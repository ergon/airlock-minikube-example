---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microgateway-echoserver
  labels:
    app: microgateway-echoserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microgateway-echoserver
  template:
    metadata:
      labels:
        app: microgateway-echoserver
    spec:
      imagePullSecrets:
        - name: dockerregcred
      initContainers:
        - name: configbuilder
          image: docker.ergon.ch/airlock-pd-waf/airlock-microgateway-configbuilder:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
            - name: OPERATIONAL_MODE
              value: integration
            - name: JWT_ENCRYPTION_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: JWT_ENCRYPTION_PASSPHRASE
            - name: JWT_SIGNATURE_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: JWT_SIGNATURE_PASSPHRASE
            - name: COOKIE_NAME
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: COOKIE_NAME
            - name: JWT_ROLE
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: JWT_ROLE
          volumeMounts:
            - name: config
              mountPath: /config/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: secret
              mountPath: /secret/config/
              readOnly: true
            - name: config-files
              mountPath: /resources-gen
      containers:
        - name: microgateway-echoserver
          image: docker.ergon.ch/airlock-pd-waf/airlock-microgateway:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
          ports:
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: config-files
              mountPath: /config/
          livenessProbe:
            failureThreshold: 9
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /usr/bin/sleep
                  - "10"
          resources:
            requests:
              memory: 256Mi
              cpu: 30m
            limits:
              memory: 4048Mi
      volumes:
        - name: config
          configMap:
            name: microgateway-echoserver-config
        - name: secret
          secret:
            secretName: microgateway-secret
        - name: config-files
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: microgateway-echoserver
  labels:
    app: microgateway-echoserver
spec:
  selector:
    app: microgateway-echoserver
  ports:
    - name: https
      port: 8443
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microgateway-echoserver-config
data:
  config.yaml: |
    license_file: /secret/config/license

    log:
      level: info

    session:
      encryption_passphrase_file: /secret/config/passphrase

    expert_settings:
      apache: |
        RemoteIPHeader x-real-ip
        RemoteIPInternalProxy 10.0.0.0/8
        RemoteIPInternalProxy 172.16.0.0/12
        RemoteIPInternalProxy 192.168.0.0/16
      security_gate: |
        # TODO:
        # Needed until AP-21937 is available.
        # Attention: Request Header Whitelist must allow this header
        Request.Logging.Headers.Enable        "TRUE"
        Request.Logging.Headers.Mode          "request"
        Request.Logging.Headers.Pattern       "^x-request-id:"
        Request.Logging.Headers.IgnoreCase    "TRUE"
        Request.Logging.Headers.InvertPattern "FALSE"

    apps:
    - virtual_host:
        name: vh-echoserver
      mappings:
      - name: echoserver
        entry_path:
          value: /echo/
        session_handling: ignore_session
        operational_mode: ${OPERATIONAL_MODE:-production}
        threat_handling: notify
        deny_rule_groups:
        - level: strict
          enabled: true
        auth:
          flow: redirect
          denied_access_url: /auth/check-login
          access:
          - roles:
            - echo-user
        access_token:
          mandatory: true
          token_type: signed_and_encrypted
          expiry_checked: true
          extraction:
            mode: cookie
            cookie: ${COOKIE_NAME}
          signature:
            method: HS512
            passphrase: ${JWT_SIGNATURE_PASSPHRASE}
          encryption:
            algorithm: A256GCM
            passphrase: ${JWT_ENCRYPTION_PASSPHRASE}
          roles:
            - claim: roles
              extraction:
                regex:
                  pattern: ${JWT_ROLE}
                substitution: echo-user
        expert_settings:
          security_gate: |
            Backend.AddEnvironmentCookies         "TRUE"
            Cookie.PassthroughSelector.Pattern    "^.*$"
            Cookie.PassthroughSelector.IgnoreCase "TRUE"
        backend:
          name: beg-echoserver
          hosts:
          - protocol: 'http'
            name: echoserver
            port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-microgateway-echoserver
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: https
spec:
  rules:
    - http:
        paths:
          - path: /echo
            pathType: Prefix
            backend:
              service:
                name: microgateway-echoserver
                port:
                  number: 8443
