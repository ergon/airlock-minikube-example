---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microgateway-echoserver
  labels:
    app: microgateway-echoserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: microgateway-echoserver
  template:
    metadata:
      labels:
        app: microgateway-echoserver
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
    spec:
      imagePullSecrets:
        - name: dockerregcred
      initContainers:
        - name: configbuilder
          image: docker.io/ergon/airlock-microgateway-configbuilder-nightly:3.0.0.sprint3_Build002
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
            - name: OPERATIONAL_MODE
              value: integration
            - name: JWT_ENCRYPTION_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: JWT_ENCRYPTION_PASSPHRASE
            - name: JWT_SIGNATURE_PASSPHRASE
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: JWT_SIGNATURE_PASSPHRASE
            - name: COOKIE_NAME
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: COOKIE_NAME
          volumeMounts:
            - name: config
              mountPath: /config/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: secret
              mountPath: /secret/config/
              readOnly: true
            - name: config-files
              mountPath: /resources-gen
      containers:
        - name: microgateway-echoserver
          image: docker.io/ergon/airlock-microgateway-nightly:3.0.0.sprint3_Build002
          imagePullPolicy: IfNotPresent
          env:
            - name: TZ
              valueFrom:
                configMapKeyRef:
                  name: generic-parameters
                  key: TZ
          ports:
            - name: https
              containerPort: 8443
            - name: probes
              containerPort: 9090
            - name: metrics
              containerPort: 9102
          volumeMounts:
            - name: config-files
              mountPath: /config/
          livenessProbe:
            failureThreshold: 9
            timeoutSeconds: 5
            httpGet:
              path: /alive
              port: probes
            initialDelaySeconds: 90
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthy
              port: probes
            initialDelaySeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /usr/bin/sleep
                  - "10"
          resources:
            requests:
              memory: 256Mi
              cpu: 30m
            limits:
              memory: 4048Mi
      volumes:
        - name: config
          configMap:
            name: microgateway-echoserver-config
        - name: secret
          secret:
            secretName: microgateway-secret
        - name: config-files
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: microgateway-echoserver
  labels:
    app: microgateway-echoserver
spec:
  selector:
    app: microgateway-echoserver
  ports:
    - name: https
      port: 8443
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microgateway-echoserver-config
data:
  config.yaml: |
    license_file: /secret/config/license

    log:
      level: info

    session:
      encryption_passphrase_file: /secret/config/passphrase

    remote_ip:
      header: x-real-ip
      internal_proxies:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16

    expert_settings:
      security_gate: |
        CorrelationId.Extraction.0.Request.Header.Pattern       "^X-Request-ID: ([[:graph:]]+)$"
        CorrelationId.Extraction.0.Request.Header.IgnoreCase    "TRUE"
        CorrelationId.Extraction.0.Request.Header.Template      "$1"

    apps:
      - virtual_host:
          name: vh-echoserver
        mappings:
          - name: echoserver
            entry_path:
              value: /echo/
            session_handling: ignore_session
            operational_mode: ${OPERATIONAL_MODE:-production}
            threat_handling: block
            env_cookies: true
            deny_rule_groups:
              - level: strict
            cookies:
              passthrough:
                pattern: ^${COOKIE_NAME}$
            auth:
              flow: redirect
              denied_access_url: /auth/ui/app/auth/application/access
              access:
                - roles:
                  - echo-user
            access_token:
              mandatory: true
              token_type: signed_and_encrypted
              expiry_checked: true
              extraction:
                mode: cookie
                cookie: ${COOKIE_NAME}
              jwks_providers:
                -  echoserver_jwks
              roles:
                - claim: roles
                  extraction:
                    regex:
                      pattern: customer
                    substitution: echo-user
            backend:
              name: beg-echoserver
              hosts:
                - protocol: 'http'
                  name: echoserver
                  port: 8080
    jwks_providers:
      local:
        - name: echoserver_jwks
          jwks: |
            {
                "keys": 
                    [     
                    {
                        "kty": "oct",
                        "use": "sig",
                        "alg": "HS512",
                        "k": "${JWT_SIGNATURE_PASSPHRASE}",
                        "key_ops": ["verify"]
                    },
                    {
                        "kty": "oct",
                        "use": "enc",
                        "alg": "dir",
                        "k": "${JWT_ENCRYPTION_PASSPHRASE}",
                        "key_ops": ["decrypt"]
                    }
                ]
            }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-microgateway-echoserver
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: https
spec:
  rules:
    - http:
        paths:
          - path: /echo/
            pathType: Prefix
            backend:
              service:
                name: microgateway-echoserver
                port:
                  number: 8443
