---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:7.6.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - "-c"
              - |
                set -x

                cd /var/tmp/kibana-init/

                KIBANA_HOST=localhost
                KIBANA_PORT=5601

                requests=0
                max_requests=30
                sleep_for=5

                while true; do
                  STATUS_CODE=$(curl -s -m 10 -k -L -o /dev/null -w "%{http_code}" "http://${KIBANA_HOST}:${KIBANA_PORT}${SERVER_BASEPATH}/api/status")
                  requests=$((requests+1))
                  echo "INFO: Request Nr. " $requests
                  if [ "${STATUS_CODE}" = "200" ]; then
                	  echo "INFO: Kibana is started."
                	  break
                  fi
                  if [ ${requests} -gt ${max_requests} ]; then
                	  echo "FAILED: Instance not ready in time."
                	  echo " # timeout"
                	  exit 1
                  fi
                  sleep ${sleep_for}
                done

                function kibana_index_patterns() {
                  curl -fsS -w '\n' \
                    -X 'POST' \
                    -H 'kbn-xsrf: true' -H 'Content-Type: application/json' \
                    -d "@$1" \
                    http://"${KIBANA_HOST}:${KIBANA_PORT}${SERVER_BASEPATH}/api/saved_objects/_bulk_create?overwrite=true"
                }

                function kibana_import() {
                  curl -fsS -w '\n' \
                    -X POST \
                    -H 'kbn-xsrf: true' \
                    --form "file=@$1" \
                    http://"${KIBANA_HOST}:${KIBANA_PORT}${SERVER_BASEPATH}/api/saved_objects/_import?overwrite=true"
                }

                kibana_index_patterns './default-index-patterns.json'
                
                if ((NO_IAM != 1)); then
                	kibana_index_patterns './airlock-iam-index-patterns.json'
                	kibana_import './airlock-iam-kibana.ndjson'
                fi
                
                if ((NO_WAF != 1)); then
                	kibana_index_patterns './airlock-waf-index-patterns.json'
                	kibana_import './airlock-waf-kibana.ndjson'
                fi

                echo -e '\n\e[0;32mKibana setup completed\e[0m\n'
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: generic-parameters
              key: TZ
        - name: ELASTICSEARCH_URL
          value: "http://elasticsearch:9200"
        - name: "SERVER_BASEPATH"
          value: "/kibana"
        - name: "SERVER_REWRITEBASEPATH"
          value: "true"
        ports:
        - containerPort: 5601
          name: webinterface
        volumeMounts:
        - name: data
          mountPath: /var/tmp/kibana-init/
          subPath: kibana
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data-claim
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  labels:
    service: kibana
spec:
  type: ClusterIP
  ports:
    - port: 5601
      name: webinterface
  selector:
    app: kibana