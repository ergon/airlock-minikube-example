---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      initContainers:
      - name: git-sync
        image: k8s.gcr.io/git-sync/git-sync:v3.2.0
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: generic-parameters
              key: TZ
        - name: GIT_SYNC_REPO
          valueFrom:
            configMapKeyRef:
              name: gitsync-bootstrap-parameters
              key: GIT_SYNC_REPO
        - name: GIT_SYNC_BRANCH
          valueFrom:
            configMapKeyRef:
              name: gitsync-bootstrap-parameters
              key: GIT_SYNC_BRANCH
        - name: GIT_SYNC_ROOT
          value: /var/tmp/gitsync/
        - name: GIT_SYNC_DEST
          value: tmp
        - name: GIT_SYNC_SUBMODULES
          value: "off"
        - name: GIT_SYNC_ONE_TIME
          value: "true"
        volumeMounts:
        - name: git-sync-dir
          mountPath: /var/tmp/gitsync/
      - name: elasticsearch-bootstrap
        image: busybox
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: generic-parameters
              key: TZ
        command:
        - sh
        - "-c"
        - |
          ls -laR /var/tmp/gitsync/tmp/efk/ && \
          cp -rp /var/tmp/gitsync/tmp/efk/data/elasticsearch/* /var/tmp/elasticsearch-init/
        volumeMounts:
        - name: git-sync-dir
          mountPath: /var/tmp/gitsync/
        - name: es-template-files
          mountPath: /var/tmp/elasticsearch-init/
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - "-c"
              - |
                set -x

                cd /var/tmp/elasticsearch-init/

                ES_HOST=localhost
                ES_PORT=9200
                DATE=$(date +%Y.%m.%d)
                
                requests=0
                max_requests=30
                sleep_for=5

                while true; do
                  STATUS_CODE=$(curl -s -m 10 -k -L -o /dev/null -w "%{http_code}" "http://${ES_HOST}:${ES_PORT}")
                  requests=$((requests+1))
                  echo "INFO: Request Nr. " $requests
                  if [ "${STATUS_CODE}" = "200" ]; then
                	  echo "INFO: Elasticsearch is started."
                	  break
                  fi
                  if [ ${requests} -gt ${max_requests} ]; then
                	  echo "FAILED: Instance not ready in time."
                	  echo " # timeout"
                	  exit 1
                  fi
                  sleep ${sleep_for}
                done

                function curl_es() {
                	curl -fisS -w '\n' \
                		-X "${1}" \
                		${3:+-H 'Content-Type: application/json' -d "@$3"} \
                		"http://${ES_HOST}:${ES_PORT}${2}"
                }
              
                if ((NO_IAM != 1)); then
                  curl_es 'PUT' '/_ingest/pipeline/airlock-iam-default-pipeline' './airlock-iam-ingest-pipeline.json'
                  curl_es 'PUT' '/_template/airlock-iam' './airlock-iam-template.json'
                fi
                
                if ((NO_WAF != 1)); then
                  curl_es 'PUT' '/_ingest/pipeline/airlock-waf-default-pipeline' './airlock-waf-ingest-pipeline.json'
                  curl_es 'PUT' '/_template/airlock-waf' './airlock-waf-template.json'
                fi
                
                echo -e "\n\e[0;32mElasticsearch setup completed\e[0m\n"
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: generic-parameters
              key: TZ
        - name: discovery.type
          value: single-node
        ports:
        - name: client
          containerPort: 9200
        - name: nodes
          containerPort: 9300
        volumeMounts:
        - name: es-template-files
          mountPath: /var/tmp/elasticsearch-init/
        - name: data
          mountPath: "/usr/share/elasticsearch/data"
      volumes:
      - name: git-sync-dir
        emptyDir: {}
      - name: es-template-files
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: elasticsearch-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    service: elasticsearch
spec:
  ports:
  - port: 9200
    name: client
  - port: 9300
    name: nodes
  selector:
    app: elasticsearch
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pv-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi