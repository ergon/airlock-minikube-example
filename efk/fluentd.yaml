---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: kube-system
  labels:
    app: fluentd
spec:
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              name: generic-parameters
              key: TZ
        - name:  FLUENT_ELASTICSEARCH_HOST
          value: "elasticsearch.default"
        - name:  FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        - name: FLUENT_ELASTICSEARCH_SCHEME
          value: "http"
        - name: FLUENTD_SYSTEMD_CONF
          value: disable
        # For better separation in Kibana dashboards
        #- name: FLUENT_ELASTICSEARCH_LOGSTASH_INDEX_NAME
        #  value: fluentd
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: config
          mountPath: /fluentd/etc/conf.d
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config
        configMap:
          name: fluentd-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: kube-system
data:
  microgateway.conf: |
    # Parse the logs as JSON
    <filter kubernetes.var.log.containers.microgateway**>
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field false

      # Enable `inject_key_prefix` to add a
      # prefix to the microgateway keys
      inject_key_prefix microgateway.
      <parse>
        @type json
      </parse>
    </filter>

    # Create the key 'req_id' to track the requests across applications.
    <filter kubernetes.var.log.containers.microgateway**>
      @type record_transformer
      enable_ruby

      # TODO:
      # Once AP-21937 is available the req_id could 
      # be extracted from the correct field.
      <record>
        req_id ${JSON.parse(record['log'])['req_id']}
      </record>
      remove_keys "#{ENV['FLUENT_REMOVE_KEYS'] || 'log'}"
    </filter>

  nginx-ingress.conf: |
    <source>
      @type tail
      path /var/log/containers/ingress-nginx-controller*.log
      pos_file /var/log/ingress-nginx-controller-containers.log.pos
      tag "#{ENV['FLUENT_CONTAINER_TAIL_TAG'] || 'kubernetes.*'}"
      read_from_head true
      <parse>
        @type json
      </parse>
    </source>
    
    # Parse the logs as JSON
    <filter kubernetes.var.log.containers.ingress-nginx-controller**>
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field false
      
      # Enable `inject_key_prefix` to add a
      # prefix to the ingress keys
      inject_key_prefix ingress.
      <parse>
        @type json
      </parse>
    </filter>

    # Create the key 'req_id' to track the requests across applications.
    <filter kubernetes.var.log.containers.ingress-nginx-controller**>
      @type record_transformer
      enable_ruby
    
      <record>
        req_id ${JSON.parse(record['log'])['req_id']}
      </record>
      remove_keys "#{ENV['FLUENT_REMOVE_KEYS'] || 'log'}"
    </filter>

  echoserver.conf: |
    # Parse the logs as JSON
    <filter kubernetes.var.log.containers.echoserver**>
      @type parser
      key_name log
      reserve_data true
      remove_key_name_field false

      # Enable `inject_key_prefix` to add a
      # prefix to the echoserver keys
      inject_key_prefix echoserver.
      <parse>
        @type json
      </parse>
    </filter>

    # Create the key 'req_id' to track the requests across applications.
    <filter kubernetes.var.log.containers.echoserver**>
      @type record_transformer
      enable_ruby
    
      <record>
        req_id ${JSON.parse(record['log'])['http_req']['http_x_request_id']}
      </record>
      remove_keys "#{ENV['FLUENT_REMOVE_KEYS'] || 'log'}"
    </filter>