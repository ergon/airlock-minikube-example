# error_log  /dev/stderr debug;
error_log  /dev/null emerg;
events {
    worker_connections  1024;
}
http {

    log_format main escape=json '{'
    '"timestamp": "$time_iso8601",  '
    '"req_id": "$request_id", '
    '"upstream_status": "$upstream_status", '
    '"upstream_addr": "$upstream_addr", '
    '"http_req":{ '
    '  "http_method": "$request_method", '
    '  "entry_url": "$scheme://$host$request_uri", '
    '  "entry_path": "$request_uri", '
    '  "entry_query": "$query_string", '
    '  "http_status": $status, '
    '  "vhost_proto":"$scheme", '
    '  "vhost_proto_vers": "$server_protocol", '
    '  "http_user_agent": "$http_user_agent", '
    '  "http_referrer": "$http_referer", '
    '  "http_content_type": "$content_type", '
    '  "http_host": "$host", '
    '  "http_x_request_id": "$http_x_request_id", '
    '  "req_size": "$request_length", '
    '  "resp_size": "$upstream_response_length", '
    '  "time_resp": "$upstream_response_time s", '
    '  "client_ip": "$remote_addr", '
    '  "front_src_ip": "$http_x_forwarded_for", '
    '  "front_src_port": "$remote_port", '
    '  "front_dst_port": "$server_port", '
    '  "front_tls_proto": "$ssl_protocol", '
    '  "front_tls_cipher": "$ssl_cipher" '
    '}}';

    access_log /dev/stdout main;
    include mime.types;

    server {
        listen       8080;

        default_type text/plain;

        location / {
          if ( $query_string ~* "code=([^&]+)" ) { echo_exec @code; }
          if ( $query_string ~* "sleep=y" ) { echo_exec @sleep; }

          echo_exec @req_dupl;

        }

        location @code {
          if ( $query_string ~* "code=([^&]+)" ) { set $code $1; }
          if ( $query_string ~* "location=([^&]+)" ) { set $redirect_loc $1; }
          if ( $redirect_loc = "" ) { set $redirect_loc https://www.airlock.com; }

          if ( $code = 200 ) { return 200; }
          if ( $code = 201 ) { return 201; }
          if ( $code = 204 ) { return 204; }
          if ( $code ~* "^2(?!00|01|04)..$" ) { return 200; }

          if ( $code = 301 ) { return 301 $redirect_loc; }
          if ( $code = 302 ) { return 302 $redirect_loc; }
          if ( $code = 303 ) { return 303 $redirect_loc; }

          if ( $code = 401 ) { return 401; }
          if ( $code = 403 ) { return 403; }
          
          if ( $code = 503 ) { return 503; }

          echo_exec @req_dupl;
        }

        location @req_dupl {
            echo "HTTP REQUEST";
            echo "############\n";
            echo_duplicate 1 $echo_client_request_headers;
            echo "\n";
            echo_read_request_body;
            echo $request_body;

            echo "HELP";
            echo "#####\n";
            echo "Parameters:";
            echo "===========";
            echo "* code: <response status code>";
            echo "  allowed values: 200|201|204|301|302|303|401|403|503";
            echo "* location: <redirect location if code 301, 302 or 303>";
            echo "  allowed values: .*";
            echo "* sleep: <sleep>";
            echo "  allowed values: y";
            echo "* sleep_for: <time to sleep if sleep=y>";
            echo "  allowed values: <int>";

            echo "\n";
            echo "Examples:";
            echo "===========";
            echo "* http://<echoserver>/";
            echo "  Returns this site.";
            echo "* http://<echoserver>/?code=204";
            echo "  Sends HTTP response with status code 204 back.";
            echo "* http://<echoserver>/?code=302&location=https://www.airlock.com/microgateway/";
            echo "  Sends a HTTP redirect to https://www.airlock.com/microgateway/ with status code 302.";
            echo "* http://<echoserver>/?sleep=y";
            echo "  Sleeps for random time (1-10 sec) before reflecting the request.";
            echo "* http://<echoserver>/?sleep=y&sleep_for=4";
            echo "  Sleeps for 3 seconds before reflecting the request.";
        }

        location @sleep {
            if ( $query_string ~* "sleep_for=([^&]+)" ) { set $sleep_for $1; }
            if ( $sleep_for = "" ) { 
                set_by_lua_block $sleep_for {
                    return math.random(1, 10)
                }
            }        

            echo_sleep $sleep_for;

            echo_exec @req_dupl;
        }
    }
}
